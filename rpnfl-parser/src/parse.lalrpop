use rpnfl_parser::ast::*;

grammar;

pub Expr : Expr = {
    <l:@L> <raw_expr:RawExpr> <r:@R> => Expr::new(l, r, raw_expr),
}

pub RawExpr : RawExpr = {
    "(" <Expr+> ")" => RawExpr::SubExpressions(<>),
    "{" <Expr+> "}" => RawExpr::EscExpressions(<>),
    Path => RawExpr::Reference(<>),
    "=" <SnakeLabel> => RawExpr::Assign(<>),
    "'" <SnakeLabel> => RawExpr::Tag(<>),
    "\\" <froms:TypeList> "->" <to:Type> ":" <name:SnakeLabel> <body:Expr> =>
        RawExpr::DefFunction{name, froms, to, body:Box::new(body)},
    "\\" <froms:TypeList> ":" <name:CamelLabel> =>
        RawExpr::DefConstructor{name, froms},
    "#" <name:CamelLabel> <body:Expr> =>
        RawExpr::DefModule{
            name,
            froms:TypeList{ordered:false, types:vec![]},
            body:Box::new(body)
        },
    // "#" <froms:TypeList> ":" <name:CamelLabel> <body:Expr> =>
    //     RawExpr::DefModule{name, froms, body},
    "|" <pattern:Pattern1> "=>" <body:Expr> => RawExpr::Destructor{pattern, body:Box::new(body)},
    "@" <CamelPath> => RawExpr::Import(<>)
}

pub Type : Type = {
    <l:@L> <raw_type:RawType> <r:@R> => Type::new(l, r, raw_type),
}

pub RawType : RawType = {
    "(" <RawType1> ")",
    <type_:Type> "'" <tag:SnakeLabel> => RawType::Tagged{tag, type_:Box::new(type_)},
    SnakeLabel => RawType::Variable(<>),
    CamelPath => RawType::DataType{path:<>, args:vec![]},
}

RawType1 : RawType = {
    <froms:TypeList> "->" <to:Type> => RawType::Function{froms, to:Box::new(to)},
    <args:(Type)+> <path:CamelPath> => RawType::DataType{path, args},
    RawType,
}

TypeList : TypeList = {UnorderedTypeList, OrderedTypeList}

UnorderedTypeList : TypeList = {
    SeperatedMT<",", Type, Type> => TypeList{ordered:false, types:<>}
}

OrderedTypeList : TypeList = {
    SeperatedAT<";", Type, Type> => TypeList{ordered:true, types:<>}
}

Pattern : Pattern = {
    "(" <Pattern1> ")",
    SnakeLabel => Pattern::Variable(<>),
    "_" => Pattern::Blank,
}

Pattern1 : Pattern = {
    <args:Pattern*> <name:CamelLabel> => Pattern::Constructor{name, args},
    <arg:Pattern> "'" <tag:SnakeLabel> => Pattern::Tagged{tag, arg:Box::new(arg)},
    Pattern,
}

Path : Path = {SnakePath, CamelPath}

SnakePath : Path = {
    SeperatedF<".", CamelLabel, SnakeLabel> => Path(<>)
}

CamelPath : Path = {
    SeperatedF<".", CamelLabel, CamelLabel> => Path(<>)
}

SnakeLabel : String = {
    <r"[a-z][a-z_]*"> => <>.to_string()
}

CamelLabel : String = {
    <r"[A-Z][A-Za-z]*"> => <>.to_string()
}

// SnakeLabelOrBlank : String = {
//     SnakeLabel,
//     "_" => <>.to_string()
// }

SeperatedNT<SEP,HEAD,TAIL> : Vec<HEAD> = {
    <x:HEAD> <mut xs:(SEP <TAIL>)*> => {
        let mut r = vec![x];
        r.append(&mut xs);
        r
    }
}

SeperatedMT<SEP,HEAD,TAIL> : Vec<HEAD> = {
    <x:HEAD> <mut xs:(SEP <TAIL>)*> SEP? => {
        let mut r = vec![x];
        r.append(&mut xs);
        r
    }
}

SeperatedAT<SEP,HEAD,TAIL> : Vec<HEAD> = {
    <x:HEAD> <mut xs:(SEP <TAIL>)*> SEP => {
        let mut r = vec![x];
        r.append(&mut xs);
        r
    }
}

SeperatedF<SEP,INIT,LAST> : Vec<LAST> = {
    <mut xs:(<INIT> SEP)*> <x:LAST> => {
        xs.push(x);
        xs
    }
}

// pub Expr : Box<Expr> = {
//     "hello" => Box::new(RawExpr::)
// }

// Expr1 : Box<Expr> = {
//     "{" <Expr> "}" => Box::new(RawExpr::Abstraction(<>)),
//     "$" <Num> => Box::new(RawExpr::Argument(<>.parse().unwrap())),
//     "%" <Num> => Box::new(RawExpr::Recursion(<>.parse().unwrap())),
//     // Expr2,
//     "(" <Expr> ")",
// }

// // Expr2 : Box<Expr> = {
    
// // }

// Num : String = {
//     r"[0-9]+" => <>.to_string(),
// }

    // <l:CamelLabel> <mut ls:("." <CamelLabel>)*> => {
    //     let mut r = vec![l];
    //     r.append(&mut ls);
    //     Path(r)
    // }

    // <l:SnakeLabel> <mut ls:("." <CamelLabel>)*> => {
    //     let mut r = vec![l];
    //     r.append(&mut ls);
    //     Path(r)
    // }